/*! For license information please see array-sqlizr.js.LICENSE.txt */
(()=>{var r={962:function(r,t){!function(e){"use strict";var n="Compound",o="MemberExpression",i="Literal",u=function(r,t){var e=new Error(r+" at character "+t);throw e.index=t,e.description=r,e},a=!0,s={"-":a,"!":a,"~":a,"+":a},p={"||":1,"&&":2,"|":3,"^":4,"&":5,"==":6,"!=":6,"===":6,"!==":6,"<":7,">":7,"<=":7,">=":7,"<<":8,">>":8,">>>":8,"+":9,"-":9,"*":10,"/":10,"%":10},c=function(r){var t,e=0;for(var n in r)(t=n.length)>e&&r.hasOwnProperty(n)&&(e=t);return e},f=c(s),l=c(p),h={true:!0,false:!1,null:null},y=function(r){return p[r]||0},g=function(r,t,e){return{type:"||"===r||"&&"===r?"LogicalExpression":"BinaryExpression",operator:r,left:t,right:e}},v=function(r){return r>=48&&r<=57},d=function(r){return 36===r||95===r||r>=65&&r<=90||r>=97&&r<=122||r>=128&&!p[String.fromCharCode(r)]},m=function(r){return 36===r||95===r||r>=65&&r<=90||r>=97&&r<=122||r>=48&&r<=57||r>=128&&!p[String.fromCharCode(r)]},b=function(r){for(var t,e,a=0,c=r.charAt,b=r.charCodeAt,x=function(t){return c.call(r,t)},w=function(t){return b.call(r,t)},E=r.length,O=function(){for(var r=w(a);32===r||9===r||10===r||13===r;)r=w(++a)},A=function(){var r,t,e=U();return O(),63!==w(a)?e:(a++,(r=A())||u("Expected expression",a),O(),58===w(a)?(a++,(t=A())||u("Expected expression",a),{type:"ConditionalExpression",test:e,consequent:r,alternate:t}):void u("Expected :",a))},C=function(){O();for(var t=r.substr(a,l),e=t.length;e>0;){if(p.hasOwnProperty(t)&&(!d(w(a))||a+t.length<r.length&&!m(w(a+t.length))))return a+=e,t;t=t.substr(0,--e)}return!1},U=function(){var r,t,e,n,o,i,s,p,c;if(i=N(),!(t=C()))return i;for(o={value:t,prec:y(t)},(s=N())||u("Expected expression after "+t,a),n=[i,o,s];(t=C())&&0!==(e=y(t));){for(o={value:t,prec:e},c=t;n.length>2&&e<=n[n.length-2].prec;)s=n.pop(),t=n.pop().value,i=n.pop(),r=g(t,i,s),n.push(r);(r=N())||u("Expected expression after "+c,a),n.push(o,r)}for(r=n[p=n.length-1];p>1;)r=g(n[p-1].value,n[p-2],r),p-=2;return r},N=function(){var t,e,n;if(O(),t=w(a),v(t)||46===t)return j();if(39===t||34===t)return P();if(91===t)return B();for(n=(e=r.substr(a,f)).length;n>0;){if(s.hasOwnProperty(e)&&(!d(w(a))||a+e.length<r.length&&!m(w(a+e.length))))return a+=n,{type:"UnaryExpression",operator:e,argument:N(),prefix:!0};e=e.substr(0,--n)}return!(!d(t)&&40!==t)&&R()},j=function(){for(var r,t,e="";v(w(a));)e+=x(a++);if(46===w(a))for(e+=x(a++);v(w(a));)e+=x(a++);if("e"===(r=x(a))||"E"===r){for(e+=x(a++),"+"!==(r=x(a))&&"-"!==r||(e+=x(a++));v(w(a));)e+=x(a++);v(w(a-1))||u("Expected exponent ("+e+x(a)+")",a)}return t=w(a),d(t)?u("Variable names cannot start with a number ("+e+x(a)+")",a):46===t&&u("Unexpected period",a),{type:i,value:parseFloat(e),raw:e}},P=function(){for(var r,t="",e=x(a++),n=!1;a<E;){if((r=x(a++))===e){n=!0;break}if("\\"===r)switch(r=x(a++)){case"n":t+="\n";break;case"r":t+="\r";break;case"t":t+="\t";break;case"b":t+="\b";break;case"f":t+="\f";break;case"v":t+="\v";break;default:t+=r}else t+=r}return n||u('Unclosed quote after "'+t+'"',a),{type:i,value:t,raw:e+t+e}},I=function(){var t,e=w(a),n=a;for(d(e)?a++:u("Unexpected "+x(a),a);a<E&&(e=w(a),m(e));)a++;return t=r.slice(n,a),h.hasOwnProperty(t)?{type:i,value:h[t],raw:t}:"this"===t?{type:"ThisExpression"}:{type:"Identifier",name:t}},Q=function(r){for(var t,e,o=[],i=!1,s=0;a<E;){if(O(),(t=w(a))===r){i=!0,a++,41===r&&s&&s>=o.length&&u("Unexpected token "+String.fromCharCode(r),a);break}if(44===t){if(a++,++s!==o.length)if(41===r)u("Unexpected token ,",a);else if(93===r)for(var p=o.length;p<s;p++)o.push(null)}else(e=A())&&e.type!==n||u("Expected comma",a),o.push(e)}return i||u("Expected "+String.fromCharCode(r),a),o},R=function(){var r,t;for(t=40===(r=w(a))?W():I(),O(),r=w(a);46===r||91===r||40===r;)a++,46===r?(O(),t={type:o,computed:!1,object:t,property:I()}):91===r?(t={type:o,computed:!0,object:t,property:A()},O(),93!==(r=w(a))&&u("Unclosed [",a),a++):40===r&&(t={type:"CallExpression",arguments:Q(41),callee:t}),O(),r=w(a);return t},W=function(){a++;var r=A();if(O(),41===w(a))return a++,r;u("Unclosed (",a)},B=function(){return a++,{type:"ArrayExpression",elements:Q(93)}},k=[];a<E;)59===(t=w(a))||44===t?a++:(e=A())?k.push(e):a<E&&u('Unexpected "'+x(a)+'"',a);return 1===k.length?k[0]:{type:n,body:k}};b.version="0.3.5",b.toString=function(){return"JavaScript Expression Parser (JSEP) v"+b.version},b.addUnaryOp=function(r){return f=Math.max(r.length,f),s[r]=a,this},b.addBinaryOp=function(r,t){return l=Math.max(r.length,l),p[r]=t,this},b.addLiteral=function(r,t){return h[r]=t,this},b.removeUnaryOp=function(r){return delete s[r],r.length===f&&(f=c(s)),this},b.removeAllUnaryOps=function(){return s={},f=0,this},b.removeBinaryOp=function(r){return delete p[r],r.length===l&&(l=c(p)),this},b.removeAllBinaryOps=function(){return p={},l=0,this},b.removeLiteral=function(r){return delete h[r],this},b.removeAllLiterals=function(){return h={},this},r.exports?t=r.exports=b:t.parse=b}()}},t={};function e(n){if(t[n])return t[n].exports;var o=t[n]={exports:{}};return r[n].call(o.exports,o,o.exports,e),o.exports}e.n=r=>{var t=r&&r.__esModule?()=>r.default:()=>r;return e.d(t,{a:t}),t},e.d=(r,t)=>{for(var n in t)e.o(t,n)&&!e.o(r,n)&&Object.defineProperty(r,n,{enumerable:!0,get:t[n]})},e.o=(r,t)=>Object.prototype.hasOwnProperty.call(r,t),(()=>{"use strict";var r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(r,t){r.__proto__=t}||function(r,t){for(var e in t)t.hasOwnProperty(e)&&(r[e]=t[e])})(t,e)};function t(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}var n=function(){return(n=Object.assign||function(r){for(var t,e=1,n=arguments.length;e<n;e++)for(var o in t=arguments[e])Object.prototype.hasOwnProperty.call(t,o)&&(r[o]=t[o]);return r}).apply(this,arguments)};function o(){for(var r=0,t=0,e=arguments.length;t<e;t++)r+=arguments[t].length;var n=Array(r),o=0;for(t=0;t<e;t++)for(var i=arguments[t],u=0,a=i.length;u<a;u++,o++)n[o]=i[u];return n}var i=function(r){if(null===r)return r;if(r instanceof Date)return new Date(r.getTime());if(r instanceof Array){var t=[];return r.forEach((function(r){t.push(r)})),t.map((function(r){return i(r)}))}if("object"==typeof r&&r!=={}){var e=n({},r);return Object.keys(e).forEach((function(r){e[r]=i(e[r])})),e}return r},u=e(962),a=e.n(u),s={"||":function(r,t){return r||t},"&&":function(r,t){return r&&t},"|":function(r,t){return r|t},"^":function(r,t){return r^t},"&":function(r,t){return r&t},"==":function(r,t){return r==t},"!=":function(r,t){return r!=t},"===":function(r,t){return r===t},"!==":function(r,t){return r!==t},"<":function(r,t){return r<t},">":function(r,t){return r>t},"<=":function(r,t){return r<=t},">=":function(r,t){return r>=t},"<<":function(r,t){return r<<t},">>":function(r,t){return r>>t},">>>":function(r,t){return r>>>t},"+":function(r,t){return r+t},"-":function(r,t){return r-t},"*":function(r,t){return r*t},"/":function(r,t){return r/t},"%":function(r,t){return r%t}},p={"-":function(r){return-r},"+":function(r){return+r},"~":function(r){return~r},"!":function(r){return!r}};function c(r,t){return r.map((function(r){return l(r,t)}))}function f(r,t){var e=l(r.object,t);return r.computed?[e,e[l(r.property,t)]]:[e,e[r.property.name]]}function l(r,t){switch(r.type){case"ArrayExpression":return c(r.elements,t);case"BinaryExpression":return s[r.operator](l(r.left,t),l(r.right,t));case"CallExpression":var e,n,o;if("MemberExpression"===r.callee.type?(e=(o=f(r.callee,t))[0],n=o[1]):n=l(r.callee,t),"function"!=typeof n)return;return n.apply(e,c(r.arguments,t));case"ConditionalExpression":return l(r.test,t)?l(r.consequent,t):l(r.alternate,t);case"Identifier":return t[r.name];case"Literal":return r.value;case"LogicalExpression":return"||"===r.operator?l(r.left,t)||l(r.right,t):"&&"===r.operator?l(r.left,t)&&l(r.right,t):s[r.operator](l(r.left,t),l(r.right,t));case"MemberExpression":return f(r,t)[1];case"ThisExpression":return t;case"UnaryExpression":return p[r.operator](l(r.argument,t));default:return}}var h=function(r,t,e){void 0===e&&(e=null),this.attributeName=r,this.alias=t||r,this.expression=e},y=function(){function r(r){this.fromArray=r}return r.prototype.getQueryArray=function(){return this.fromArray},r.prototype.select=function(r){var t=this;return void 0===r&&(r=null),r&&0!==r.length?("string"==typeof r[0]&&(r=r.map((function(r){return new h(r,r)}))),this.fromArray.map((function(e){for(var n={},o=0,i=r;o<i.length;o++){var u=i[o],s=u.alias&&u.alias.length>0?u.alias:u.attributeName;if(u.expression)try{var p=l(a()(u.expression),e);t.setAttribute(n,s,p)}catch(r){t.setAttribute(n,s,null)}else Object.prototype.hasOwnProperty.call(e,u.attributeName)?t.setAttribute(n,s,e[u.attributeName]):u.attributeName.includes(".")?t.setAttribute(n,s,u.attributeName.split(".").reduce((function(r,t){return r[t]}),e)):t.setAttribute(n,s,null)}return n}))):this.fromArray},r.prototype.setAttribute=function(r,t,e){return"string"==typeof t?this.setAttribute(r,t.split("."),e):1==t.length?r[t[0]]=e:0==t.length?r:(Object.prototype.hasOwnProperty.call(r,t[0])||(r[t[0]]={}),this.setAttribute(r[t[0]],t.slice(1),e))},r}(),g=function(r){function e(){return null!==r&&r.apply(this,arguments)||this}return t(e,r),e.prototype.orderBy=function(r,t){return void 0===t&&(t=!1),new e(t?this.getQueryArray().sort(r).reverse():this.getQueryArray().sort(r))},e.prototype.orderByAsc=function(r){var t="string"==typeof r?r:r.attributeName;return new e(o(this.getQueryArray()).sort((function(r,e){var n=null,o=null;return Object.prototype.hasOwnProperty.call(r,t)?n=r[t]:t.includes(".")&&(n=t.split(".").reduce((function(r,t){return r[t]}),r)),Object.prototype.hasOwnProperty.call(e,t)?o=r[t]:t.includes(".")&&(o=t.split(".").reduce((function(r,t){return r[t]}),e)),n&&o?n>o?1:-1:0})))},e.prototype.orderByDesc=function(r){return new e(this.orderByAsc(r).getQueryArray().reverse())},e.prototype.limit=function(r){return new e(this.getQueryArray().splice(0,r))},e.prototype.union=function(r){return new e(this.getQueryArray().concat(r))},e.prototype.count=function(){return this.getQueryArray().length},e.prototype.sum=function(r){for(var t="string"==typeof r?r:r.attributeName,e=0,n=0,o=this.getQueryArray();n<o.length;n++){var i=o[n],u=0;Object.prototype.hasOwnProperty.call(i,t)?u=i[t]:t.includes(".")&&(u=t.split(".").reduce((function(r,t){return r[t]}),i)),"number"==typeof u&&(e+=u)}return e},e.prototype.average=function(r){return this.sum(r)/this.getQueryArray().length},e}(y),v=function(r){function e(){return null!==r&&r.apply(this,arguments)||this}return t(e,r),e.prototype.join=function(r,t,n,o,u){void 0===u&&(u=!1);for(var a=[],s=0,p=this.getQueryArray();s<p.length;s++){for(var c=p[s],f=!1,l=0,h=r;l<h.length;l++){var y=h[l];if(c[n]===y[o]){f=!0;var g=i(c);for(var v in g[t]={},y)Object.prototype.hasOwnProperty.call(y,v)&&(g[t][v]=y[v]);a.push(g)}}u||f||((g=i(c))[t]=null,a.push(g))}return new e(a)},e.prototype.where=function(r){if(void 0===r&&(r=null),r&&r.length>0){for(var t=[],e=a()(r),n=0,o=this.getQueryArray();n<o.length;n++){var u=o[n];try{l(e,u)&&t.push(i(u))}catch(r){console.error(r)}}return new g(t)}return new g(this.getQueryArray())},e.prototype.whereFilter=function(r){return new g(this.getQueryArray().filter(r))},e}(y);!function(){function r(){}r.from=function(r){return new v(r)},r.parse=function(r,t,e,n){void 0===e&&(e=[]),void 0===n&&(n=[]);for(var i=o(e).reverse(),u=o(n).reverse(),a=r.replace(/from/gi,"&@*FROM").replace(/outer join/gi,"&@*OUTJN").replace(/inner join/gi,"&@*INJN").replace(/join/gi,"&@*JOIN").replace(/where/gi,"&@*WHERE").replace(/order by/gi,"&@*ORDRBY").replace(/limit/gi,"&@*LIMIT").replace(/union/gi,"&@*UNION").trim().split("&@*"),s=new v(t),p="",c=0,f=a;c<f.length;c++)if((N=f[c]).toUpperCase().startsWith("JOIN")||N.toUpperCase().startsWith("OUTJN")||N.toUpperCase().startsWith("INJN")){var l=i.pop();if(l){var y=N.split(new RegExp("ON","i"))[0].substring(4).trim(),g=N.split(new RegExp("ON","i"))[1].split("=")[0].trim(),d=N.split(new RegExp("ON","i"))[1].split("=")[1].trim();s=s.join(l,y,g,d,N.toUpperCase().startsWith("INJN"))}}else N.toUpperCase().startsWith("WHERE")&&(p=N.split(new RegExp("WHERE","i"))[1].trim());for(var m=s.where(p),b=0,x=a;b<x.length;b++)if((N=x[b]).toUpperCase().startsWith("LIMIT")){var w=N.split(new RegExp("LIMIT","i"))[1].trim();m=m.limit(parseInt(w))}else if(N.toUpperCase().startsWith("ORDRBY")){var E=N.split(" ")[2];m=N.toUpperCase().includes("ASC")?m.orderByAsc(E):m.orderByDesc(E)}else if(N.toUpperCase().startsWith("UNION")){var O=u.pop();O&&(m=m.union(O))}for(var A=[],C=0,U=a;C<U.length;C++){var N;if((N=U[C]).toUpperCase().startsWith("SELECT")&&"SELECT *"!==N.toUpperCase().trim()){for(var j=0,P=N.trim().substring(6).trim().split(",");j<P.length;j++){var I=P[j].split(new RegExp("as","i")),Q=(E=I[0].trim(),I.length>1?I[1].trim():E);E.startsWith("(")&&E.endsWith(")")?A.push(new h("expression",Q,E.substring(1,E.length-1))):A.push(new h(E,Q))}break}}return m.select(A)}}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,